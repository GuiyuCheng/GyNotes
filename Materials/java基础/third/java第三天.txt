1.面向对象的特征
  [1]封装
     封装是把过程和数据包围起来，对数据的访问只能通已定义的界面。
     面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治，封装的对象，这些对象通过一个受保护的接口访问其它对象。
  [2]继承
     继承是一种联结类的层级模型，并且允许和鼓励类的重用，它提供一种明确的表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类的继承。
     新类也称为派生类（子类subclass），而原始类称为新类的基类（父类superclass）。派生类可以从它的基类那里继承属性和方法，并且类可以修改或者添加新的方法，使之更适合特殊的要求。
  [3]抽象
     抽象是忽略一个主题中与当前目标无关的那些方面，以便更充分的注意与当前目标有关的方面。抽象并不打算了解全部问题，而是选取其中的一部分，暂时不用部分细节。
     抽象包含两个方面：一个是过程的抽象，一个是数据的抽象。
  [4]多态
     

2.多态
  [1]多态的体现
     方法的重载   ---- 编译时多态
     方法的重写   ---- 运行时多态
  [2]对象的多态性
     向上转型：程序自动完成  (上溯造型)
     父类 父类的引用 = 子类的对象
     向下转型：              (下溯造型)
     子类 子类引用 = （子类引用）父类引用
  [3]instanceof关键字
     检测当前引用指向的对象的类型
     在造型钱使用instanceof关键字测试对象的类型
  [4]多态的好处
     以多态的形式来传递参数，增强了参数类型的灵活性。
     注意：造型只发生在父类和子类之间。

3.内部类
  [1]定义在一个类里面的类
  [2]格式
     class Out{

       class Inner{

       }
     }
  [3]在Out类中创建内部类对象：Inner in = new Inner();
     在Out类外面创建内部类对象：Out.Inner in = new Out().new Inner();
  [4]内部类的权限可以是public,protected,default,private
     外面类的权限只能是public,default

4.匿名内部类
  匿名内部类的定义和使用在一起
  匿名内部类没有名字，所以在定义的时候就开始使用，并且只能通过该类创建一次对象
  
5.原则：内部类给当前类使用。

6.==和equals()
  "=="比较对象的地址
  equals()比较对象的内容

7.自动装箱和自动拆箱
  自动装箱：将基本数据类型自动转化为引用数据类型
  自动拆箱：将引用数据类型自动转化为基本数据类型

8.单例模式
  一个类有且只能创建一个对象

9.异常
  [1]运行时异常（编程错误导致，可避免）
     数组下标越界异常
     空指针异常
     算术异常
     负数组长度异常
     类型转换异常
  [2]非运行时异常 （外界因素导致，无法避免）
     文件找不到
     读字节
     联网
  [3]程序员可以避免运行时异常，无法避免非运行时异常。所以采用捕获异常的方式来处理异常，避免指令终止，程序退出。
  [4]捕获异常
     try{
	可能产生异常的语句
     }
     catch(Exception e){
	捕获产生的异常
     }
     finally{
	无论是否抛出异常，都会执行该语句。通常用来做资源的清理工作，例如关闭流等。
     }
  [5]非运行时异常，系统强制要求用户捕获
  [6]多重catch。try中可以放多个可能抛出异常的语句。用户可以使用多重catch进行捕获。
     注意：使用多重catch语句时，异常子类一定要位于异常父类之前。
  [7]throw  抛出一个异常对象
  [8]throws 可能抛出的异常类型

10.常用类
   String：字符串内容不能修改
   StringBuffer：字符串内容可以修改
   StringBuilder：被单个线程操作。速度比StringBuffer快

11.容器类：ArrayList，HashMap
